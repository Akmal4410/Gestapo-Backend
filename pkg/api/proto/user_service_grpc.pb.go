// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/proto/user_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserServie_GetHome_FullMethodName           = "/pb.UserServie/GetHome"
	UserServie_AddRemoveWishlist_FullMethodName = "/pb.UserServie/AddRemoveWishlist"
	UserServie_GetWishlist_FullMethodName       = "/pb.UserServie/GetWishlist"
)

// UserServieClient is the client API for UserServie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServieClient interface {
	GetHome(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetHomeResponse, error)
	AddRemoveWishlist(ctx context.Context, in *AddRemoveWishlistRequest, opts ...grpc.CallOption) (*Response, error)
	GetWishlist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetWishlistResponse, error)
}

type userServieClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServieClient(cc grpc.ClientConnInterface) UserServieClient {
	return &userServieClient{cc}
}

func (c *userServieClient) GetHome(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetHomeResponse, error) {
	out := new(GetHomeResponse)
	err := c.cc.Invoke(ctx, UserServie_GetHome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServieClient) AddRemoveWishlist(ctx context.Context, in *AddRemoveWishlistRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserServie_AddRemoveWishlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServieClient) GetWishlist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetWishlistResponse, error) {
	out := new(GetWishlistResponse)
	err := c.cc.Invoke(ctx, UserServie_GetWishlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServieServer is the server API for UserServie service.
// All implementations must embed UnimplementedUserServieServer
// for forward compatibility
type UserServieServer interface {
	GetHome(context.Context, *Request) (*GetHomeResponse, error)
	AddRemoveWishlist(context.Context, *AddRemoveWishlistRequest) (*Response, error)
	GetWishlist(context.Context, *Request) (*GetWishlistResponse, error)
	mustEmbedUnimplementedUserServieServer()
}

// UnimplementedUserServieServer must be embedded to have forward compatible implementations.
type UnimplementedUserServieServer struct {
}

func (UnimplementedUserServieServer) GetHome(context.Context, *Request) (*GetHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHome not implemented")
}
func (UnimplementedUserServieServer) AddRemoveWishlist(context.Context, *AddRemoveWishlistRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoveWishlist not implemented")
}
func (UnimplementedUserServieServer) GetWishlist(context.Context, *Request) (*GetWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlist not implemented")
}
func (UnimplementedUserServieServer) mustEmbedUnimplementedUserServieServer() {}

// UnsafeUserServieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServieServer will
// result in compilation errors.
type UnsafeUserServieServer interface {
	mustEmbedUnimplementedUserServieServer()
}

func RegisterUserServieServer(s grpc.ServiceRegistrar, srv UserServieServer) {
	s.RegisterService(&UserServie_ServiceDesc, srv)
}

func _UserServie_GetHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServieServer).GetHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServie_GetHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServieServer).GetHome(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServie_AddRemoveWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoveWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServieServer).AddRemoveWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServie_AddRemoveWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServieServer).AddRemoveWishlist(ctx, req.(*AddRemoveWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServie_GetWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServieServer).GetWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServie_GetWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServieServer).GetWishlist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServie_ServiceDesc is the grpc.ServiceDesc for UserServie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserServie",
	HandlerType: (*UserServieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHome",
			Handler:    _UserServie_GetHome_Handler,
		},
		{
			MethodName: "AddRemoveWishlist",
			Handler:    _UserServie_AddRemoveWishlist_Handler,
		},
		{
			MethodName: "GetWishlist",
			Handler:    _UserServie_GetWishlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/user_service.proto",
}
